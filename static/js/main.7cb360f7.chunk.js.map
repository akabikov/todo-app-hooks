{"version":3,"sources":["hooks/useInputState.js","reducers/item.reducer.js","hooks/useStorageReducer.js","helpers/storageHelpers.js","context/items.context.js","NewItemInput.jsx","hooks/useToggleState.js","ItemEdit.jsx","ItemView.jsx","Item.jsx","ItemList.jsx","App.js","serviceWorker.js","index.js"],"names":["useInputState","initVal","useState","value","setValue","evt","target","reducer","state","action","type","id","text","newItem","uuidv4","isChecked","map","el","filter","useStorageReducer","key","useReducer","val","result","JSON","parse","localStorage","getItem","error","console","message","readStorage","dispatch","useEffect","items","setItem","stringify","updateStorage","ItemsContext","createContext","DispatchContext","ItemProvider","props","Provider","children","NewItemInput","handleChange","reset","useContext","Paper","style","margin","padding","onSubmit","preventDefault","Grid","container","item","flex","TextField","label","fullWidth","onChange","IconButton","edge","aria-label","useToggleState","setState","toggle","st","ItemEdit","toggleEditMode","edit","editedText","ListItem","height","autoFocus","ListItemSecondaryAction","onClick","ItemView","button","paddingRight","ListItemIcon","minWidth","Checkbox","checked","ListItemText","primary","textDecoration","overflow","memo","isLast","isEditMode","Divider","ItemList","length","list","i","List","App","justify","marginTop","xs","md","lg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7cb360f7.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction useInputState(initVal) {\r\n  const [value, setValue] = useState(initVal);\r\n\r\n  const handleChange = (evt) => {\r\n    setValue(evt.target.value);\r\n  };\r\n\r\n  const reset = () => {\r\n    setValue(initVal);\r\n  };\r\n\r\n  return [value, handleChange, reset];\r\n}\r\n\r\nexport default useInputState;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction reducer(state, action) {\r\n  const { type, id, text } = action;\r\n\r\n  switch (type) {\r\n    case \"add\":\r\n      const newItem = {\r\n        id: uuidv4(),\r\n        text,\r\n        isChecked: false,\r\n      };\r\n\r\n      return [...state, newItem];\r\n\r\n    case \"check\":\r\n      return state.map((el) =>\r\n        el.id === id ? { ...el, isChecked: !el.isChecked } : el\r\n      );\r\n\r\n    case \"edit\":\r\n      return state.map((el) => (el.id === id ? { ...el, text } : el));\r\n\r\n    case \"remove\":\r\n      return state.filter((el) => el.id !== id);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import { useReducer, useEffect } from \"react\";\r\nimport { readStorage, updateStorage } from \"../helpers/storageHelpers\";\r\n\r\nfunction useStorageReducer(key, initVal, reducer) {\r\n  const init = (initVal) => {\r\n    let val;\r\n\r\n    try {\r\n      val = readStorage(key) || initVal;\r\n    } catch {\r\n      val = initVal;\r\n    }\r\n\r\n    return val;\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, initVal, init);\r\n\r\n  useEffect(() => updateStorage(key, state));\r\n\r\n  return [state, dispatch];\r\n}\r\n\r\nexport default useStorageReducer;\r\n","function readStorage(key) {\r\n  let result;\r\n\r\n  try {\r\n    result = JSON.parse(localStorage.getItem(key));\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    throw error;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction updateStorage(key, items) {\r\n  localStorage.setItem(key, JSON.stringify(items));\r\n}\r\n\r\nexport { readStorage, updateStorage };\r\n","import React, { createContext } from \"react\";\r\nimport reducer from \"../reducers/item.reducer\";\r\nimport useStorageReducer from \"../hooks/useStorageReducer\";\r\n\r\nexport const ItemsContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nexport function ItemProvider(props) {\r\n  const [items, dispatch] = useStorageReducer(\"items\", [], reducer);\r\n\r\n  return (\r\n    <ItemsContext.Provider value={items}>\r\n      <DispatchContext.Provider value={dispatch}>\r\n        {props.children}\r\n      </DispatchContext.Provider>\r\n    </ItemsContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport useInputState from \"./hooks/useInputState\";\r\nimport { DispatchContext } from \"./context/items.context\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\n\r\nfunction NewItemInput() {\r\n  const [text, handleChange, reset] = useInputState(\"\");\r\n  const dispatch = useContext(DispatchContext);\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    dispatch({ type: \"add\", text });\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Paper style={{ margin: \"1rem 0\", padding: \"0.5rem 1rem\" }}>\r\n      <form onSubmit={handleSubmit}>\r\n        <Grid container>\r\n          <Grid item style={{ flex: \"auto\" }}>\r\n            <TextField\r\n              label='Add new...'\r\n              fullWidth\r\n              value={text}\r\n              onChange={handleChange}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton edge='end' aria-label='add' type='submit'>\r\n              <AddCircleIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default NewItemInput;\r\n","import { useState } from \"react\";\r\n\r\nfunction useToggleState(initVal = false) {\r\n  const [state, setState] = useState(initVal);\r\n  const toggle = () => setState((st) => !st);\r\n\r\n  return [state, toggle];\r\n}\r\n\r\nexport default useToggleState;\r\n","import React, { useContext } from \"react\";\r\nimport useInputState from \"./hooks/useInputState\";\r\nimport { DispatchContext } from \"./context/items.context\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nfunction ItemEdit({ id, text, edit, toggleEditMode }) {\r\n  const [editedText, handleChange] = useInputState(text);\r\n\r\n  const dispatch = useContext(DispatchContext);\r\n\r\n  const handleEdited = (evt) => {\r\n    evt.preventDefault();\r\n    dispatch({ type: \"edit\", id, text: editedText });\r\n    toggleEditMode();\r\n  };\r\n\r\n  return (\r\n    <ListItem style={{ height: \"4rem\" }}>\r\n      <form\r\n        onSubmit={handleEdited}\r\n        style={{ flex: \"auto\", margin: \"0 6rem 0 2rem\" }}\r\n      >\r\n        <TextField\r\n          autoFocus\r\n          fullWidth\r\n          value={editedText}\r\n          onChange={handleChange}\r\n        />\r\n        <ListItemSecondaryAction>\r\n          <IconButton aria-label='save' type='submit'>\r\n            <SaveIcon />\r\n          </IconButton>\r\n          <IconButton aria-label='close' edge='end' onClick={toggleEditMode}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </form>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default ItemEdit;\r\n","import React, { useContext } from \"react\";\r\nimport { DispatchContext } from \"./context/items.context\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nfunction ItemView({ id, text, isChecked, toggleEditMode }) {\r\n  const dispatch = useContext(DispatchContext);\r\n\r\n  const handleCheck = (evt) => {\r\n    dispatch({ type: \"check\", id });\r\n  };\r\n\r\n  const handleRemove = (evt) => {\r\n    evt.preventDefault();\r\n    dispatch({ type: \"remove\", id });\r\n  };\r\n\r\n  const handleEditMode = (evt) => {\r\n    evt.preventDefault();\r\n    toggleEditMode();\r\n  };\r\n\r\n  return (\r\n    <ListItem\r\n      button\r\n      onClick={handleCheck}\r\n      style={{ height: \"4rem\", paddingRight: \"6rem\" }}\r\n    >\r\n      <ListItemIcon style={{ minWidth: \"2rem\" }}>\r\n        <Checkbox edge='start' checked={isChecked} />\r\n      </ListItemIcon>\r\n      <ListItemText\r\n        primary={text}\r\n        style={{\r\n          textDecoration: isChecked ? \"line-through\" : \"none\",\r\n          overflow: \"auto\",\r\n        }}\r\n      />\r\n      <ListItemSecondaryAction>\r\n        <IconButton onClick={handleEditMode}>\r\n          <EditIcon />\r\n        </IconButton>\r\n        <IconButton edge='end' onClick={handleRemove}>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default ItemView;\r\n","import React, { memo } from \"react\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\nimport ItemEdit from \"./ItemEdit\";\r\nimport ItemView from \"./ItemView\";\r\n\r\nfunction Item({ id, text, isChecked, isLast }) {\r\n  const [isEditMode, toggleEditMode] = useToggleState();\r\n\r\n  return (\r\n    <>\r\n      {isEditMode ? (\r\n        <ItemEdit {...{ id, text, toggleEditMode }} />\r\n      ) : (\r\n        <ItemView {...{ id, text, isChecked, toggleEditMode }} />\r\n      )}\r\n      {isLast ? null : <Divider />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(Item);\r\n","import React, { useContext } from \"react\";\r\nimport { ItemsContext } from \"./context/items.context\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Item from \"./Item\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nfunction ItemList() {\r\n  const items = useContext(ItemsContext);\r\n\r\n  if (!items.length) return null;\r\n\r\n  const list = items.map((item, i) => (\r\n    <Item key={item.id} {...item} isLast={i === items.length - 1} />\r\n  ));\r\n\r\n  return (\r\n    <Paper>\r\n      <List>{list}</List>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default ItemList;\r\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport NewItemInput from \"./NewItemInput\";\nimport ItemList from \"./ItemList\";\nimport { ItemProvider } from \"./context/items.context\";\n\nfunction App() {\n  return (\n    <Grid container justify='center' style={{ marginTop: \"1rem\" }}>\n      <Grid item xs={11} md={8} lg={4}>\n        <ItemProvider>\n          <NewItemInput />\n          <ItemList />\n        </ItemProvider>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}